import { Octokit } from '@octokit/rest';

async function setupGitHub() {
  console.log('üöÄ GitHub Setup for Personal Historian Bot\n');

  // Check for required environment variables
  const token = process.env.GITHUB_TOKEN;
  const owner = process.env.GITHUB_OWNER || process.env.GITHUB_USERNAME;
  const repo = process.env.GITHUB_REPO || 'personal-historian-notes';

  if (!token) {
    console.error('‚ùå GITHUB_TOKEN environment variable is required');
    console.log('\nHow to get a GitHub Personal Access Token:');
    console.log('1. Go to https://github.com/settings/tokens/new');
    console.log('2. Give it a name like "Personal Historian Bot"');
    console.log('3. Select scopes: "repo" (full control of private repositories)');
    console.log('4. Click "Generate token"');
    console.log('5. Copy the token and add to your .env file:');
    console.log('   GITHUB_TOKEN=your_token_here');
    process.exit(1);
  }

  if (!owner) {
    console.error('‚ùå GITHUB_OWNER or GITHUB_USERNAME environment variable is required');
    console.log('Add to your .env file:');
    console.log('   GITHUB_OWNER=your_github_username');
    process.exit(1);
  }

  console.log(`üì¶ Using repository: ${owner}/${repo}`);
  console.log('‚úÖ GitHub token found');

  const octokit = new Octokit({ auth: token });

  try {
    // Check if repo exists
    try {
      await octokit.repos.get({ owner, repo });
      console.log(`‚úÖ Repository ${owner}/${repo} exists and is accessible`);
    } catch (error: any) {
      if (error.status === 404) {
        console.log(`üìù Repository ${owner}/${repo} not found. Creating it...`);

        // Create the repository
        await octokit.repos.createForAuthenticatedUser({
          name: repo,
          private: true,
          description: 'Personal historian notes synced from Telegram bot',
          auto_init: true,
        });

        console.log(`‚úÖ Created private repository: ${owner}/${repo}`);
      } else {
        throw error;
      }
    }

    // Create folder structure
    console.log('\nüìÅ Setting up folder structure...');

    // Create README
    const readmeContent = `# Personal Historian Notes

This repository contains daily notes captured by your Personal Historian Telegram bot.

## Structure

- \`daily/\` - Daily notes in YYYY-MM-DD.md format
- \`attachments/\` - Photos and other attachments

## Syncing with Obsidian

1. Clone this repository to your local machine
2. Open the folder in Obsidian as a vault
3. Use the Obsidian Git plugin to sync changes

Generated by [Personal Historian Bot](https://github.com/your-bot-repo)`;

    try {
      await octokit.repos.createOrUpdateFileContents({
        owner,
        repo,
        path: 'README.md',
        message: 'Initialize repository structure',
        content: Buffer.from(readmeContent).toString('base64'),
      });
      console.log('‚úÖ Created README.md');
    } catch (error: any) {
      if (error.status === 422) {
        console.log('‚ÑπÔ∏è  README.md already exists');
      }
    }

    // Create .gitignore
    const gitignoreContent = `.obsidian/
.DS_Store
*.tmp`;

    try {
      await octokit.repos.createOrUpdateFileContents({
        owner,
        repo,
        path: '.gitignore',
        message: 'Add .gitignore',
        content: Buffer.from(gitignoreContent).toString('base64'),
      });
      console.log('‚úÖ Created .gitignore');
    } catch (error: any) {
      if (error.status === 422) {
        console.log('‚ÑπÔ∏è  .gitignore already exists');
      }
    }

    // Test creating a daily note
    console.log('\nüß™ Testing daily note creation...');
    const testDate = new Date().toISOString().split('T')[0];
    const testPath = `daily/${testDate}-test.md`;
    const testContent = `# Test Note

This is a test note created at ${new Date().toISOString()}.

If you see this, the GitHub integration is working correctly!`;

    await octokit.repos.createOrUpdateFileContents({
      owner,
      repo,
      path: testPath,
      message: 'Test daily note creation',
      content: Buffer.from(testContent).toString('base64'),
    });

    console.log(`‚úÖ Test note created at: ${testPath}`);

    // Get the repository URL
    const { data: repoData } = await octokit.repos.get({ owner, repo });

    console.log('\nüéâ Setup complete!');
    console.log('\nüìã Add these to your .env file:');
    console.log(`GITHUB_TOKEN=${token}`);
    console.log(`GITHUB_OWNER=${owner}`);
    console.log(`GITHUB_REPO=${repo}`);
    console.log('\nüîó Repository URLs:');
    console.log(`Web: ${repoData.html_url}`);
    console.log(`Clone: ${repoData.clone_url}`);
    console.log('\nüì± To sync with Obsidian:');
    console.log('1. Clone the repository locally');
    console.log('2. Open the folder as an Obsidian vault');
    console.log('3. Install the "Obsidian Git" community plugin for auto-sync');

  } catch (error: any) {
    console.error('\n‚ùå Setup failed:', error.message);
    if (error.status === 401) {
      console.error('Invalid token. Please check your GITHUB_TOKEN.');
    }
    process.exit(1);
  }
}

setupGitHub().catch(console.error);